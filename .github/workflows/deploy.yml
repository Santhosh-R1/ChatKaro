# A descriptive name for your workflow
name: MERN Platform Deployment Trigger

# Defines what triggers the workflow
on:
  workflow_dispatch:
    # These are the ONLY inputs this workflow expects from your backend's API call.
    inputs:
      target_cloud:
        required: true
      deployment_id:
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checks-out your repository's code
      - name: 1. Checkout repository code
        uses: actions/checkout@v4

      # Step 2 (Optional but recommended): Debug step to confirm secrets are being read
      - name: "Debug Secrets (Temporary)"
        run: |
          echo "API_URL exists: ${{ secrets.API_URL != '' }}"
          echo "PROJECT_ID exists: ${{ secrets.PROJECT_ID != '' }}"
          echo "ACTIONS_API_KEY exists: ${{ secrets.ACTIONS_API_KEY != '' }}"

      # Step 3: Placeholder for your actual deployment logic
      - name: 3. Simulate Deployment & Generate URL
        id: deploy_step 
        run: |
          echo "Simulating deployment..."
          sleep 2 # Shortened sleep for faster debugging
          echo "DEPLOYMENT_URL=https://my-app-${{ github.run_id }}.example.com" >> $GITHUB_OUTPUT
          echo "Deployment simulation finished!"

      # ===================================================================
      #  THE FIX IS IN THE 'curl' COMMANDS BELOW (SINGLE QUOTES ADDED)
      # ===================================================================
      
      # Step 4: Runs ONLY if all previous steps were successful
      - name: 4. Report Success to API
        if: success()
        run: |
          # The entire URL is now wrapped in single quotes to treat it as a literal string
          curl --fail -v -X PATCH '${{ secrets.API_URL }}/api/projects/${{ secrets.PROJECT_ID }}/deployments/${{ github.event.inputs.deployment_id }}' \
          -H "Content-Type: application/json" \
          --data-raw '{
            "status": "success",
            "deploymentUrl": "${{ steps.deploy_step.outputs.DEPLOYMENT_URL }}",
            "apiKey": "${{ secrets.ACTIONS_API_KEY }}"
          }'

      # Step 5: Runs ONLY if any previous step failed
      - name: 5. Report Failure to API
        if: failure()
        run: |
          # The entire URL is also wrapped in single quotes here
          curl --fail -v -X PATCH '${{ secrets.API_URL }}/api/projects/${{ secrets.PROJECT_ID }}/deployments/${{ github.event.inputs.deployment_id }}' \
          -H "Content-content-type: application/json" \
          --data-raw '{
            "status": "failure",
            "apiKey": "${{ secrets.ACTIONS_API_KEY }}"
          }'
